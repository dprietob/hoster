package com.hoster.files;

import com.hoster.data.Directory;
import com.hoster.data.Host;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class VHostsFile extends HostsFile
{
    // TODO
    public List<Host> load(String fileName)
    {
        List<Host> hostsList = new ArrayList<>();
        File file = new File(fileName);
        String line;

        try {
            if (file.exists()) {
                Scanner reader = new Scanner(file);
                while (reader.hasNextLine()) {
                    line = reader.nextLine().trim();
                    if (isDirectory(line)) {
                        loadMainDirectory(reader, line);
                    } else if (isVirtualHost(line)) {
                        loadVirtualHost(reader, line);
                    }
                }
                reader.close();
            }
        } catch (FileNotFoundException e) {
            consoleListener.onConsoleError(e.getMessage());
        }

        return hostsList;
    }

    public boolean save(String fileName, Directory mainDirectory, List<Host> hostsList, String appName, String appVersion)
    {
        if (deleteCurrentFile(fileName)) {
            if (createNewFile(fileName)) {
                return writeFile(fileName, mainDirectory, hostsList, appName, appVersion);
            }
        }
        return false;
    }

    private boolean writeFile(String fileName, Directory mainDirectory, List<Host> hostsList, String appName, String appVersion)
    {
        try {
            if (!hostsList.isEmpty()) {
                FileWriter fileWriter = new FileWriter(fileName);
                fileWriter.write("# Generated by " + appName + " " + appVersion + "\n\n");
                fileWriter.write(mainDirectory.parseToXML() + "\n\n");

                for (Host h : hostsList) {
                    fileWriter.write(h.parseToXML() + "\n\n");
                }

                fileWriter.close();
                return true;
            }
        } catch (IOException e) {
            consoleListener.onConsoleError(e.getMessage());
        }
        return false;
    }

    private boolean isDirectory(String line)
    {
        return line.toLowerCase().indexOf("<directory") == 0;
    }

    private boolean isVirtualHost(String line)
    {
        return line.toLowerCase().indexOf("<virtualhost") == 0;
    }

    private Directory loadMainDirectory(Scanner reader, String line)
    {
        Directory mainDirectory = new Directory();
        String[] defSplit = line.split(" ");

        if (defSplit.length == 2) {
            mainDirectory.setPath(defSplit[1].trim().replaceAll("\"", "").replaceAll(">", ""));
        }

        while (reader.hasNextLine()) {
            line = reader.nextLine().trim();
            if (line.equalsIgnoreCase("</directory>")) {
                break;
            } else {
                defSplit = line.split(" ");
                if (defSplit.length == 2) {
                    setDirectoryValue(mainDirectory, defSplit[0], defSplit[1]);
                }
            }
        }

        return mainDirectory;
    }

    private void loadVirtualHost(Scanner reader, String line)
    {

    }

    private void setDirectoryValue(Directory directory, String key, String value)
    {
        if (key.equalsIgnoreCase("allowoverride")) {
            directory.setAllowOverride(value);

        } else if (key.equalsIgnoreCase("require")) {
            directory.setRequire(value);
        }
    }
}
