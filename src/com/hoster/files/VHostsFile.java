package com.hoster.files;

import com.hoster.data.Directory;
import com.hoster.data.HList;
import com.hoster.data.Host;
import com.hoster.data.HostList;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class VHostsFile extends HostsFile
{
    public HList load(String fileName)
    {
        HList hostsList = new HostList();
        File file = new File(fileName);
        String line;

        try {
            if (file.exists()) {
                Scanner reader = new Scanner(file);
                while (reader.hasNextLine()) {
                    line = reader.nextLine().trim();
                    if (isDirectory(line)) {
                        loadDirectory(reader, line);
                    } else if (isVirtualHost(line)) {
                        hostsList.add(loadVirtualHost(reader, line));
                    }
                }
                reader.close();
            } else {
                // TODO
            }
        } catch (FileNotFoundException e) {
            // TODO: consoleListener is null on main() call
            consoleListener.onConsoleError(e.getMessage());
        }

        return hostsList;
    }

    public boolean save(String fileName, Directory mainDirectory, HList hostsList, String appName, String appVersion)
    {
        if (deleteCurrentFile(fileName)) {
            if (createNewFile(fileName)) {
                return writeFile(fileName, mainDirectory, hostsList, appName, appVersion);
            }
        }
        return false;
    }

    private boolean writeFile(String fileName, Directory mainDirectory, HList hostsList, String appName, String appVersion)
    {
        try {
            if (!hostsList.isEmpty()) {
                FileWriter fileWriter = new FileWriter(fileName);
                fileWriter.write("# Generated by " + appName + " " + appVersion + "\n\n");
                String xmlString = mainDirectory.parseToXML();

                if (!xmlString.isEmpty()) {
                    fileWriter.write(xmlString + "\n\n");
                }

                for (Host h : hostsList) {
                    xmlString = h.parseToXML();
                    if (!xmlString.isEmpty()) {
                        fileWriter.write(xmlString + "\n\n");
                    }
                }

                fileWriter.close();
                return true;
            }
        } catch (IOException e) {
            // TODO: consoleListener is null on main() call
            consoleListener.onConsoleError(e.getMessage());
        }
        return false;
    }

    private boolean isDirectory(String line)
    {
        return line.toLowerCase().indexOf("<directory") == 0;
    }

    private boolean isVirtualHost(String line)
    {
        return line.toLowerCase().indexOf("<virtualhost") == 0;
    }

    private Directory loadDirectory(Scanner reader, String line)
    {
        Directory directory = new Directory();
        String[] defSplit = line.split(" ");

        if (defSplit.length == 2) {
            directory.setPath(cleanString(defSplit[1]));
        }

        while (reader.hasNextLine()) {
            line = reader.nextLine().trim();
            if (line.equalsIgnoreCase("</directory>")) {
                break;

            } else {
                defSplit = line.split(" ");
                if (defSplit.length == 2) {
                    setDirectoryValue(directory, cleanString(defSplit[0]), cleanString(defSplit[1]));
                }
            }
        }

        return directory;
    }

    private Host loadVirtualHost(Scanner reader, String line)
    {
        Host host = new Host();
        String[] defSplit = line.split(":");

        if (defSplit.length == 2) {
            host.setPort(cleanString(defSplit[1]));
        }

        while (reader.hasNextLine()) {
            line = reader.nextLine().trim();
            if (line.equalsIgnoreCase("</virtualhost>")) {
                break;

            } else if (line.toLowerCase().contains("<directory")) {
                host.setDirectory(loadDirectory(reader, line));

            } else {
                defSplit = line.split(" ");
                if (defSplit.length == 2) {
                    setVirtualHostValue(host, cleanString(defSplit[0]), cleanString(defSplit[1]));
                }
            }
        }

        host.getDirectory().setPath(host.getDocumentRoot());

        return host;
    }

    private void setDirectoryValue(Directory directory, String key, String value)
    {
        if (key.equalsIgnoreCase("allowoverride")) {
            directory.setAllowOverride(value);

        } else if (key.equalsIgnoreCase("require")) {
            directory.setRequire(value);
        }
    }

    private void setVirtualHostValue(Host host, String key, String value)
    {
        if (key.equalsIgnoreCase("serveradmin")) {
            host.setServerAdmin(value);

        } else if (key.equalsIgnoreCase("servername")) {
            host.setServerName(value);

        } else if (key.equalsIgnoreCase("documentroot")) {
            host.setDocumentRoot(value);

        } else if (key.equalsIgnoreCase("serveralias")) {
            host.setServerAlias(value);

        } else if (key.equalsIgnoreCase("errorlog")) {
            host.setErrorLog(value);

        } else if (key.equalsIgnoreCase("customlog")) {
            host.setCustomLog(value);
        }
    }
}
